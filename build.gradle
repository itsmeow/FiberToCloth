plugins {
    id 'fabric-loom' version '0.7-SNAPSHOT'
    id 'maven-publish'
    id 'signing'
    id 'org.cadixdev.licenser' version '0.6.0'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

license {
    header rootProject.file('LICENSE')
    include '**/*.java'
}

repositories {
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroupByRegex 'me\\.shedaniel\\..*'
            includeGroup 'me.sargunvohra.mcmods'
        }
    }
    maven {
        url = 'https://maven.terraformersmc.com/releases'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
}

minecraft {
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi ("me.shedaniel.cloth:cloth-config-fabric:${cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi "me.zeroeightsix:fiber:${project.fiber_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
    publications = ["MyPublication"]
    publish = true
    pkg {
        repo = "fiber2cloth"
        name = "fiber2cloth"
        userOrg = "shedaniel"
        licenses = ["Unlicense"]
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
            desc = "Fiber 2 Cloth API for Minecraft"
            githubRepo = 'shedaniel/FiberToCloth'
            websiteUrl = 'https://github.com/shedaniel/FiberToCloth'
            issueTrackerUrl = 'https://github.com/shedaniel/FiberToCloth/issues'
            vcsUrl = 'https://github.com/shedaniel/FiberToCloth.git'
            gpg {
                sign = true
            }
        }
    }
}

curseforge {
    apiKey = project.hasProperty('apiKey') ? project.property('apiKey') : System.getenv('CF_API_KEY')
    if (apiKey != null)
        project {
            id = '340676'
            releaseType = 'release'
            addGameVersion '1.16-Snapshot'
            addGameVersion 'Fabric'
            addGameVersion 'Java 8'
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'cloth-config'
            }
            mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
                displayName = "[Fabric ${project.supported_version}] v$project.version"
            }
            addArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar"))
            afterEvaluate {
                uploadTask.dependsOn("remapJar")
                uploadTask.dependsOn("remapSourcesJar")
            }
        }
    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadocs"
    javadocs.failOnError false
    from javadocs.destinationDir
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
            groupId 'me.shedaniel.cloth'
            artifactId 'fiber2cloth'
            version = project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fiber 2 Cloth API for Minecraft')
                root.appendNode('name', 'fiber2cloth')
                root.appendNode('url', 'https://github.com/shedaniel/FiberToCloth')
                root.appendNode('packaging', 'jar')
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Unlicense')
                license.appendNode('url', 'http://unlicense.org')
                license.appendNode('distribution', 'repo')
                def developers = root.appendNode('developers')
                def shedaniel = developers.appendNode('developer')
                shedaniel.appendNode('id', 'shedaniel')
                shedaniel.appendNode('name', 'shedaniel')
                shedaniel.appendNode('email', 'daniel@shedaniel.me')
                def scm = root.appendNode('scm')
                scm.appendNode('url', "https://github.com/shedaniel/FiberToCloth")
                scm.appendNode('connection', "scm:git:git://github.com/shedaniel/FiberToCloth.git")
                scm.appendNode('developerConnection', "scm:git:ssh://github.com:shedaniel/FiberToCloth.git")
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
