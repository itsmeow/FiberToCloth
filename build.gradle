plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'maven-publish'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url = "https://maven.shedaniel.me/"
        content {
            includeGroupByRegex 'me\\.shedaniel\\..*'
            includeGroup 'me.sargunvohra.mcmods'
        }
    }
    maven {
        url = 'https://maven.terraformersmc.com/releases'
        content {
            includeGroup 'com.terraformersmc'
        }
    }
    maven {
        url = "https://cursemaven.com/"
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modApi "net.fabricmc:fabric-loader:${project.loader_version}"

    modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modApi("curse.maven:cloth-config-348521:${rootProject.cloth_version}") {
        exclude(group: "net.fabricmc")
        exclude(group: "net.fabricmc.fabric-api")
    }
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    modApi "me.zeroeightsix:fiber:${project.fiber_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release = 17
}

jar {
    from "LICENSE"
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = "javadocs"
    javadocs.failOnError false
    from javadocs.destinationDir
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            artifact javadocsJar
            groupId 'me.shedaniel.cloth'
            artifactId 'fiber2cloth'
            version = project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Fiber 2 Cloth API for Minecraft')
                root.appendNode('name', 'fiber2cloth')
                root.appendNode('url', 'https://github.com/shedaniel/FiberToCloth')
                root.appendNode('packaging', 'jar')
                def license = root.appendNode('licenses').appendNode('license')
                license.appendNode('name', 'Unlicense')
                license.appendNode('url', 'http://unlicense.org')
                license.appendNode('distribution', 'repo')
                def developers = root.appendNode('developers')
                def shedaniel = developers.appendNode('developer')
                shedaniel.appendNode('id', 'shedaniel')
                shedaniel.appendNode('name', 'shedaniel')
                shedaniel.appendNode('email', 'daniel@shedaniel.me')
                def itsmeow = developers.appendNode('developer')
                itsmeow.appendNode('id', 'itsmeow')
                itsmeow.appendNode('name', 'itsmeowdev')
                itsmeow.appendNode('email', 'itsmeow@itsmeow.dev')
                def scm = root.appendNode('scm')
                scm.appendNode('url', "https://github.com/itsmeow/FiberToCloth")
                scm.appendNode('connection', "scm:git:git://github.com/itsmeow/FiberToCloth.git")
                scm.appendNode('developerConnection', "scm:git:ssh://github.com:itsmeow/FiberToCloth.git")
            }
        }
    }
    repositories {
        maven {
            if ((System.getenv("MAVEN_USER") != '') && (System.getenv("MAVEN_PASSWORD") != '')) {
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            }
            if (System.getenv("MAVEN_URL") != '') {
                url System.getenv("MAVEN_URL")
            } else {
                url "file:///${project.buildDir}/repo"
            }
        }
    }
}
